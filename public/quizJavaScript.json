[
  {
    "id": "1",
    "question": "What is JavaScript?",
    "options": [
      "A programming language commonly used for web development",
      "A markup language for structuring web content",
      "A database management system",
      "A scripting language for server-side development"
    ],
    "answer": "A programming language commonly used for web development"
  },
  {
    "id": "2",
    "question": "What are the primitive data types in JavaScript?",
    "options": [
      "String, Number, Boolean, Symbol, Null, Undefined",
      "Object, Array, Function",
      "Integer, Float, Double, Character",
      "Class, Interface, Enum"
    ],
    "answer": "String, Number, Boolean, Symbol, Null, Undefined"
  },
  {
    "id": "3",
    "question": "What is the 'this' keyword in JavaScript?",
    "options": [
      "A reserved keyword representing the current execution context",
      "A keyword used for creating new objects",
      "A keyword for defining loops",
      "A keyword for importing external modules"
    ],
    "answer": "A reserved keyword representing the current execution context"
  },
  {
    "id": "4",
    "question": "What is the difference between 'undefined' and 'null' in JavaScript?",
    "options": [
      "'Undefined' represents the absence of a value or uninitialized variable, while 'null' represents the intentional absence of a value.",
      "'Undefined' is a string type, while 'null' is a number type.",
      "'Undefined' is a falsy value, while 'null' is a truthy value.",
      "'Undefined' is used for error handling, while 'null' is used for flow control."
    ],
    "answer": "'Undefined' represents the absence of a value or uninitialized variable, while 'null' represents the intentional absence of a value."
  },
  {
    "id": "5",
    "question": "What is a closure in JavaScript?",
    "options": [
      "A function that has access to its own execution context, including variables from its outer (enclosing) function",
      "A way to declare and define classes in JavaScript",
      "A data structure used for organizing key-value pairs",
      "A set of rules for naming variables in JavaScript"
    ],
    "answer": "A function that has access to its own execution context, including variables from its outer (enclosing) function"
  },
  {
    "id": "6",
    "question": "What is the purpose of the 'querySelector' method in JavaScript?",
    "options": [
      "To select a single element from the DOM based on a CSS selector",
      "To loop over the elements in an array",
      "To add event listeners to DOM elements",
      "To perform asynchronous HTTP requests"
    ],
    "answer": "To select a single element from the DOM based on a CSS selector"
  },
  {
    "id": "7",
    "question": "What is the difference between '==' and '===' in JavaScript?",
    "options": [
      "'==' performs loose equality comparison, allowing type coercion, while '===' performs strict equality comparison without type coercion.",
      "'==' performs strict equality comparison without type coercion, while '===' performs loose equality comparison, allowing type coercion.",
      "'==' and '===' are interchangeable and have the same behavior.",
      "'==' and '===' both perform deep equality comparison of objects and arrays."
    ],
    "answer": "'==' performs loose equality comparison, allowing type coercion, while '===' performs strict equality comparison without type coercion."
  },
  {
    "id": "8",
    "question": "What is the purpose of the 'map' method in JavaScript arrays?",
    "options": [
      "To create a new array by performing a transformation on each element of the original array",
      "To filter an array based on a given condition",
      "To sort the elements of an array in ascending order",
      "To check if any element in an array satisfies a given condition"
    ],
    "answer": "To create a new array by performing a transformation on each element of the original array"
  },
  {
    "id": "9",
    "question": "What is the purpose of the 'setTimeout' function in JavaScript?",
    "options": [
      "To execute a function after a specified delay (in milliseconds)",
      "To check if a value is of a specific data type",
      "To convert a string to a number",
      "To repeat a function at regular intervals"
    ],
    "answer": "To execute a function after a specified delay (in milliseconds)"
  },
  {
    "id": "10",
    "question": "What is the purpose of the 'splice' method in JavaScript arrays?",
    "options": [
      "To add or remove elements from an array",
      "To concatenate two arrays",
      "To sort the elements of an array in descending order",
      "To check if any element in an array satisfies a given condition"
    ],
    "answer": "To add or remove elements from an array"
  },
  {
    "id": "11",
    "question": "What is the difference between 'let', 'const', and 'var' in JavaScript for variable declaration?",
    "options": [
      "'let' and 'const' are block-scoped, while 'var' is function-scoped",
      "'let' allows reassignment, 'const' does not allow reassignment, and 'var' is used for declaring global variables",
      "'let' and 'const' are hoisted, while 'var' is not hoisted",
      "'let', 'const', and 'var' are interchangeable and have the same behavior"
    ],
    "answer": "'let' and 'const' are block-scoped, while 'var' is function-scoped"
  },
  {
    "id": "12",
    "question": "What is the purpose of the 'forEach' method in JavaScript arrays?",
    "options": [
      "To loop over the elements of an array and perform a function on each element",
      "To create a new array by performing a transformation on each element of the original array",
      "To check if any element in an array satisfies a given condition",
      "To sort the elements of an array in ascending order"
    ],
    "answer": "To loop over the elements of an array and perform a function on each element"
  },
  {
    "id": "13",
    "question": "What is an arrow function in JavaScript?",
    "options": [
      "A shorter syntax for writing function expressions",
      "A function that always returns a boolean value",
      "A function that can only be used as a constructor",
      "A function that is automatically invoked when declared"
    ],
    "answer": "A shorter syntax for writing function expressions"
  },
  {
    "id": "14",
    "question": "What is the purpose of the 'reduce' method in JavaScript arrays?",
    "options": [
      "To reduce an array to a single value by applying a function on each element",
      "To filter an array based on a given condition",
      "To sort the elements of an array in descending order",
      "To convert a string to an array"
    ],
    "answer": "To reduce an array to a single value by applying a function on each element"
  },
  {
    "id": "15",
    "question": "What is an immediately-invoked function expression (IIFE) in JavaScript?",
    "options": [
      "A function that is executed as soon as it is defined",
      "A function that is invoked with a delay using the 'setTimeout' function",
      "A function that is invoked when an event occurs",
      "A function that is called recursively until a termination condition is met"
    ],
    "answer": "A function that is executed as soon as it is defined"
  },
  {
    "id": "16",
    "question": "What is the purpose of the 'JSON.stringify' method in JavaScript?",
    "options": [
      "To convert a JavaScript object to a JSON string",
      "To parse a JSON string and convert it to a JavaScript object",
      "To validate the syntax of a JSON string",
      "To sort the keys of a JavaScript object"
    ],
    "answer": "To convert a JavaScript object to a JSON string"
  },
  {
    "id": "17",
    "question": "What is event delegation in JavaScript?",
    "options": [
      "A technique where you attach a single event listener to a parent element instead of multiple event listeners to individual child elements",
      "An event that occurs when an HTML element is clicked",
      "A technique for handling asynchronous events using promises",
      "A technique for defining custom events in JavaScript"
    ],
    "answer": "A technique where you attach a single event listener to a parent element instead of multiple event listeners to individual child elements"
  },
  {
    "id": "18",
    "question": "What is the purpose of the 'async/await' syntax in JavaScript?",
    "options": [
      "To simplify asynchronous programming and make it look more like synchronous code",
      "To define a function that can be paused and resumed later",
      "To perform HTTP requests in JavaScript",
      "To create and manage promises in JavaScript"
    ],
    "answer": "To simplifyasynchronous programming and make it look more like synchronous code"
  },
  {
    "id": "19",
    "question": "What is the difference between 'call' and 'apply' methods in JavaScript?",
    "options": [
      "'call' and 'apply' are used to invoke a function with a specified 'this' value and arguments, but 'apply' accepts an array of arguments, while 'call' accepts individual arguments.",
      "'call' and 'apply' are used to declare and define classes in JavaScript.",
      "'call' is used to invoke functions with primitive data types as arguments, while 'apply' is used for objects and arrays.",
      "'call' and 'apply' are interchangeable and have the same behavior."
    ],
    "answer": "'call' and 'apply' are used to invoke a function with a specified 'this' value and arguments, but 'apply' accepts an array of arguments, while 'call' accepts individual arguments."
  },
  {
    "id": "20",
    "question": "What is the purpose of the 'Promise' object in JavaScript?",
    "options": [
      "To represent the eventual completion (or failure) of an asynchronous operation and its resulting value",
      "To validate the syntax of a regular expression",
      "To convert a JavaScript object to a JSON string",
      "To perform HTTP requests in JavaScript"
    ],
    "answer": "To represent the eventual completion (or failure) of an asynchronous operation and its resulting value"
  }
]